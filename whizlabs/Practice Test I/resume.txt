WRONG
2 - c - compilation fails due to error at line 4. 
   
  Inner in = new Outer.new Inner(); -> inside a static method 
  Inner in = new Inner(); -> inside a non-static method
  

	
6 - JDBC suports relational and non relational databases
  - JDBC APO is a part of both Java standard edition and enterprise edition
  - JDBC stands for java database connectivity

7 - getConnection("jdb:mysql://localhost/whiz","root","whizlabs");
    unreported exception SQLException; must be caught or declared to be thrown

10 - Isolatioin Level (NOT IN EXAM) 
   D - TRANSACTION_SERIALIZABLE

11 - INCORRECT not CORRECT - the result is ok, only inverse 
- java.lang.Exception class has 5 contructorss 
- constructor Exception() don't specified a detail message.

20- 
numbers.stream().filter(predit) //immutable object 
//numbers.stream().filter(predit).forEach(System.out::print); [11,13,19]
System.out.println(numbers); //[10,11,13,19,5] 


27 - join 
   
   Thread tmine = new Thread()
   tmine.start(); 
   tmine.join(2000); 
 
    Currently running thread will move to "blocked" state after calling the join and 
may return to the "runnable" state after 2 seconds or after the "tmine" thread finished. 

The Join method cause the currently executing thread to move to "Blocked" state and wait there until joined
thread complete and move to "Dead" state. We can also invoke the "join()" method by passing long value in 
millisecond, in which case we are saying that to currently executing thread to wait until "tmine" finished, but 
if I take longer than this time(here 2000ms), then stop waiting and become "Runnable" anyway. 


29 - 
import java.util.concurrent.atomic.*;
public class Whiz29{
	int val = 10; 
	int x; 
	Whiz29(int i){
		val = i;
	}
	private AtomicInteger value = new AtomicInteger(val); //value is assigned in compile time
	public static void main(String[] args){
		Whiz29 at = new Whiz29(5); 
		System.out.println(at.value.decrementAndGet()); //9 
	}
}

33 - 
Stream<String> stream = Stream.of("1","2","3","4").parallel();
IntStream ins = stream.mapToInt(s -> Integer.parseInt(s));
//All streams achieved via that stream will be parallel too.
System.out.println(ins.isParallel());  //true

35 - when we are trying delete a directory using delete method of Files, if directory contains any sub directories 
of files then an "DirectoryNotEmptyException" will be thrown and we have got it covered using the try/catch. 


40 - ok, some mistake in the question explanation.


44 - System.out.write("Your password is: ");
In this code, we tried to use the write() method of PrintStream though it has set of overloaded write methods, but 
it hasn't got one to take string as argument. 

46 - 

public static void main(String[] args){
		Stream<Client> clients = Stream.of(new Client("Will","vps server",200),
						   new Client("Rachel","java program",1200),	
					           new Client("Anthony","Configuration",1000));
		Predicate<Client> func = e -> { System.out.print(e.getName() + " ");
						return e.getBudget() > 1000.0;
					      }; //lembrar do ;
		clients.noneMatch(func); //[Will Rachel]								
}



51 - 

From java SE 8, there is a new method in Comparator called comparing, which accepts a function that extracts a sort
key from a type Tm and returns a Comparator<T> that compares by that sort key using the specified Comparator.



List<Client> clients = new ArrayList<>();
clients.add(new Client("Will","vps server",200));
clients.add(new Client("Rachel","java program",1200));	
clients.add(new Client("Raj","PHP server",750));
		
Collections.sort(clients,Comparator.comparing(Client::getName));
System.out.println(clients); // Rachel - Raj - Will


55 - 
IntStream ints = IntStream.of(3,2,1,5,3);
ints.peek(System.out::print).allMatch(i -> i > 1); //321







WARNINGS:
8 - Importing JDBC Packages
  - Registering JDBC Driver
  - Formulating a database URL
  - Calling the "getConnection()" method of the java.sql.DriverManager class

30 - @FunctionalInterface
     public interface Callable<V>{
        V call() throws Exception
     }   
     
     @FunctionalInterface
     public interface Runnable{
        void run()
     }	
     

31 - IF We cal the join() first and then call the compute() we would never have advantage of parallelism
   - In some cases fork-join computation run slower.	
	

32 - stream.sequential()

34 -
Stream<String> sts1 = Stream.of("A","B");
Stream<String> sts2 = Stream.of("1","2");
Stream out = Stream.concat(sts1,sts2).parallel().sorted();
out.forEach(System.out::print);

at line 8 invoking the forEach will not always print in order even the stream is sorted because it is parallel. 

 
42 - Files.lines() - returns a stream with the file content
     Files.readAllLines - returns a List with the file content


49 - int avg = stream.collect(Collectors.averagingInt(s -> Integer.parseInt(s))); --> NOT iN EXAM averagingInt
 fail to try add a Double in an int 

53 - .average() - return OptionalDouble[]

57 - codar
DoubleStream dbs = DoubleStream.of(1.1,1.0,0.8,0.6,1.5);
dbs.skip(2) // 0.8,0.6,1.5
   .peek(in -> System.out.println((int)in )) //1[0] 2[0]          0.8,0.6,1.5
   .limit(2) //1[0.8] 2[0.6]
   .allMatch(d -> d < 1); true

59 - ??? 
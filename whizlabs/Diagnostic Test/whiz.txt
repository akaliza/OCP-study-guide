8- JDBC allows us to write java applications with the following funtionalities: 
	- Connect to a data source, like a database. 
	- Send queries and update statements to the database
	- Retrieve and process the results received form the database in answer to your query


9-OK
10 - jdbc:mysql://[host][:port]/[database][?property1][=value1]...

1 - "jdbc:mysql://localhost:3306/whiz?"+"user=root&password=whizlabs"
2 - "jdbc:mysql://:3306/whiz?user=root&password=whizlabs"
3 - "jdbc:mysql://localhost:3306/whiz","root","whizlabs"

11 -  Savepoints

17 - A source might be an array, a Collection, a generator function, an I/O channel, etc.  - OK 

19 - (k,v) -> System.out.println(v) -  Maps elements 

23 - Comparator<Integer> comp = Integer::compare         int compare (T o1, T o2)

24 - stateful intermediate operation : sorted 

Intermediate operations are further divided into stateless and stateful operation. 
Stateless oeprations, such as filter and map, retain no state form previously seen element when 
processing  a new element - each element can be processed independently of operations on other elements. 

The stateful operations, sucj as distinct and sorted, may incorporate state from previously elements when 
processing new elements.


29 - Comparator.comparing(e -> e.intValue()); - pag 150 OCP oracle

32 - A thread only can be in one of the five states: New, Runnable, Running, Waiting\sleeping\blocked or dead
   - try to call start() in a dead thread will throw a runtime exception 
   - stop make a thread dead state
   - once start method is invoked on a thread  it enter in the Runnable state

37 - Files.readAllLines(Paths.get(f.getAbsolutePath()));

60 - default method defined in the Consumer: 
void			accept(T t) 	
default Consumer<T>	andThen(Consumer<? super T> after)
	
65- valide primitive variation of inbuilt functional interface: BooleanSupplier
BooleanSupplier is the primitive version of the Supplier

67 - BiFunction<Double,Double,String> fun = (d,i) -> d+i.toString();
  
68 - DoubleSupplier -> getAsDouble();

69 - double applyAsDouble(double left, double right)
   - java.util.function.DoubleBinaryOperator Interface 
	
70 - java.util.ListResourceBundle is an abstract class

71 - 
SRBundel_de
SRBundel_fr
SRBundel

Local loc = new Locale("de","fr"); //country/language

start search _de_fr then only _de


 
72 - 
SRBundel
SRBundel_de
SRBundel_fr

Local loc = new Locale("de","FR");
ResourceBundle rb = ResourceBundle.getBoundle("SRBundel",loc);

>>SRBundel_de


1 - bundleName + "_" + localLanguage + "_" localeCountry + "_" localeVariant
2 - bundleName + "_" + localLanguage + "_" localeCountry 
3 - bundleName + "_" + localLanguage 
4 - bundleName + "_" + defaultLanguage + "_" defaultCountry + "_" defaultVariant 
5 - bundleName + "_" + defaultLanguage + "_" defaultCountry 
6 - bundleName + "_" + defaultLanguage
7 - bundleName 

80 - Only LocalDate, LocalTime and LocalDateTime classes include method now

83 - method truncatedTo of Instant 

84 - Instant  
    instant now = instant.now();	
    ZoneDateTime zid = ZoneDateTime.of(now,ZoneId.Of("Canada/Atlantic")); >>error

85 - UnaryOperator 
	- extends java.util.function.Function;
	- represents an operation on a single operand that produces a result of the 
	  same type as its operand
	- it has static method called identity

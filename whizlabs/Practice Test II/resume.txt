5 - adding new method in anonymous class is legal, but it is illegal to call that method  
    from outside of anonymous class since the reference type doesn't know such a method exists

14 - 

try{
   int i = Integer.parseInt(br.readLine());
   d.setAmount(i); //here catch the NotEnoughException or Exception
}catch(NegativeException E){
   System.out.print(E);
}catch(IOException E){
   System.out.print(E);
}

18 - 
int j = 9; 
assert(++j > 7) : "Error";
assert(j==12): j;
//doesn't compile, the second expression of assert must return a value
//assert(++j > 8) : System.out.println(j); 
assert(j==12): new Whiz18();

23 - 
List<String> list = new ArrayList<>();
list.add("1");
list.add("2");
list.add("3");
list.add("4");
list.add("5");
	
//lazy mode
Stream<Integer> ints = list.stream().map(s -> {System.out.print(s); return Integer.parseInt(s);});	
System.out.print("Count: ");
//terminal operation
System.out.print(ints.count()); //Count: 123455


24 -             
list -> [1,2,3,4]
System.out.print(list.set(3,"3")); //returns 4 

The set method returns the element which is removed. 

25- List<String> lst = new ArrayList<>(); 
    lst.forEachOrdered(System.out::print); //doesn't compile List dont have forEachOrdered method, only Stream have


26 - 
public class Manager{
	private static Manager manager;
	private Manager(){}
	public static Manager getManager(){
		if(manager == null){ 
 			manager = new Manager();
		}
 		return manager; 
	}
}
-E- add synchronized to getManager().


27 - private int getI(){} -- method must be public in the encapsulation principals 

28 - 
protected variables can be only access through inheritance. so trying to access the variable j, using the object
reference at line 18 causes a compile time error.


package first; 
public class Whiz28_A{
	protected int j;
	public void change(){
		j = 12;
	}
}

package second;
import first.*; 
public class Whiz28_B extends Whiz28_A{
	public static void main(String[] args){
		Whiz28_A a = new Whiz28_A();
		Whiz28_B b = new Whiz28_B();
		a.change();
		// System.out.print(a.j); doesn't compile
		System.out.print(b.j); //0	
	}
}




WARNINGS 

2- The enum constructor must be either private or package scope(default).

12 - JDBC url -> HOST DEFAULT : 127.0.0.1 - IP address of localhost
                 PORT DEFAULT : 3306

19 - AutoCloseable: 
     void close() throws Exception
     Closeable:
     void close() throws IOException



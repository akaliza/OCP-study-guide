5 - adding new method in anonymous class is legal, but it is illegal to call that method  
    from outside of anonymous class since the reference type doesn't know such a method exists

14 - 

try{
   int i = Integer.parseInt(br.readLine());
   d.setAmount(i); //here catch the NotEnoughException or Exception
}catch(NegativeException E){
   System.out.print(E);
}catch(IOException E){
   System.out.print(E);
}

18 - 
int j = 9; 
assert(++j > 7) : "Error";
assert(j==12): j;
//doesn't compile, the second expression of assert must return a value
//assert(++j > 8) : System.out.println(j); 
assert(j==12): new Whiz18();

23 - 
List<String> list = new ArrayList<>();
list.add("1");
list.add("2");
list.add("3");
list.add("4");
list.add("5");
	
//lazy mode
Stream<Integer> ints = list.stream().map(s -> {System.out.print(s); return Integer.parseInt(s);});	
System.out.print("Count: ");
//terminal operation
System.out.print(ints.count()); //Count: 123455


24 -             
list -> [1,2,3,4]
System.out.print(list.set(3,"3")); //returns 4 

The set method returns the element which is removed. 

25- List<String> lst = new ArrayList<>(); 
    lst.forEachOrdered(System.out::print); //doesn't compile List dont have forEachOrdered method, only Stream have


26 - 
public class Manager{
	private static Manager manager;
	private Manager(){}
	public static Manager getManager(){
		if(manager == null){ 
 			manager = new Manager();
		}
 		return manager; 
	}
}
-E- add synchronized to getManager().


27 - private int getI(){} -- method must be public in the encapsulation principals 

28 - 
protected variables can be only access through inheritance. so trying to access the variable j, using the object
reference at line 18 causes a compile time error.


package first; 
public class Whiz28_A{
	protected int j;
	public void change(){
		j = 12;
	}
}

package second;
import first.*; 
public class Whiz28_B extends Whiz28_A{
	public static void main(String[] args){
		Whiz28_A a = new Whiz28_A();
		Whiz28_B b = new Whiz28_B();
		a.change();
		// System.out.print(a.j); doesn't compile
		System.out.print(b.j); //0	
	}
}


32 - 
I   - ConcurrentHashMap<Integer,String> cmap = new ConcurrentHashMap<Integer,String>();
II  - HashMap<Integer,String> cmap = new HashMap<Integer,String>();
III - Map<Integer,String> cmap = new ConcurrentHashMap<Integer,String>();
IV  - ConcurrentMap<Integer,String> cmap = new ConcurrentHashMap<Integer,String>();

remove(Object key,Object value);
replace(K key,V oldValue,V newValue);

defined in the java.util.concurrent.ConcurrentMap interface
Both methods are included in the Map interface, so all given statements are correct. 

33 - there are five constructors in the ConcurentHashMap class: 
1 ConcurrentHashMap(); 
2 ConcurrentHashMap(int intialCapacity); 
3 ConcurrentHashMap(int intialCapacity, float loadFactor);
4 ConcurrentHashMap(int intialCapacity, float loadFactor, int concurrencyLevel);
5 ConcurrentHashMap(Map<? extends K, ? extends V> m);

36 - when the value of the x equal to 1 both threads see that x > 0, so both threads will reduce 1 from the current value 
of the x, so the output contain -1. 

38 - codigo. - revisar futureTask

39 - Understanding the happens-before relationship will help to avoid memory consistency error.

40 - redunction overload revisar 
     IntStream ints = IntStream.of(11,2,7,32,4,8,21,9);
     int out = ints.filter(in -> in%2==0).reduce(Integer:sum); //Optional<T> reduce(BinaryOperator<T> accumulator)

42 - NOT IN THE EXAM - FileVisitor
43 - NOT IN THE EXAM - PathMatcher
44 - NOT IN THE EXAM - FileVisitor
45 - NOT IN THE EXAM - DosFileAttributes
46 - NOT IN THE EXAM - DosFileAttributes
47 OK But not int the exam

48 - Stream<String> out = Files.list(path) //doesn't compile - list(path) return a Stream<Path>

49 - Files.newBufferedWrite(Paths.get("file.txt")); 
 
53 - the sum method is not defined in the stream class, it is defined in the primitive versions of streams such
DoubleStream and IntStream

61 - 
Stream<Double> stream = Stream.of(12.1,12.5,12.9);
Stream<Integer> list = stream.flatMap(d -> Stream.of(d.intValue()));
System.out.println(list.collect(Collectors.toSet())); //12

63 - intBinaryOperator --> applyAsInt() method not Apply

64 - LongStream ls = LongStream.of(1,2,3,4);
     LongFunction lnf = l -> (int)l;
     Stream<Integer> ins = ls.mapToObj(inf);	

65 - Function<Integer,Double> f = Function.identity(); --> identity returns the same obj 
     System.out.print(f.apply(10.0)); --> argue must be an Integer

67 - can be applied to inner class-> 
   - any access modifiers,abstract,static,final,strictfp

69 - Creating Locale object for China and Chinese language: 
     Locale loc = Locale.CHINA ;  ->> Locale object automatically set language to Chinese.  creating CHINESE only set
     a language. 

71 - ResourceBundle.Control rbc = ResourceBundle.getControl(Control.FORMAT_CLASS) -->> NOT IN EXAM

73 - Object[][] resources = new Object[2][2]; 
     resources[0][0] = "Table";
     resources[0][1] = "Table in France";     
     return resources; 
     
     >>There we have declared the object array [2][2], but we have not initialized the resource[1][0], so it 
       contains default value null as the key, So this will cause a NullPointerException at the runtime;
	
74 - until method NOT IN THE EXAM 

75 - public List<TemporaUnit> getUnits() > [Years,Months,Days] - NOT IN THE EXAM

78 - LocalDate ld = LocalDate.of(2015,12,12); 
     ld = ld.with(ChronoField.DAY_OF_YEAR,30);
     sout(ld); //2015-1-30 

79 - NOT IN THE EXAM
     LocalTime lt = LocalTime.of(2,2,15); 
     sout(lt.getLong(ChronoField.valueOf("MINUTE_OF_DAY"))); //122  

80 - NOT IN THE EXAM 
     ChronoField.YEARS --> ChronoUnit.YEARS
     ChronoUnit.MILLI_OF_SECOND --> ChronoField.MILLI_OF_SECOND

WARNINGS 

2- The enum constructor must be either private or package scope(default).

12 - JDBC url -> HOST DEFAULT : 127.0.0.1 - IP address of localhost
                 PORT DEFAULT : 3306

19 - AutoCloseable: 
     void close() throws Exception
     Closeable:
     void close() throws IOException


34 - Fork/Join

41 - <R> R collect(Supplier<R> supplier, BiConsumer<R, ? super T> accumulator, BiConsumer<R, R> combiner)
 

54 - Stream<Integer> stream = Stream.of(2,0,4,1); 
     System.out.println(stream.skip(2).limit(1).toArray()[1]); //ArrayindexOutOFBounds


56 - opi [Optional.empty]
     opi.get() --> exception

57 - ops.ofNullable(null).ifPresent(System.out:println);
     System.out.println(ops);
     --> Invoking the ofNullable static method will result new optional with empty value. Since the result optional is 
empty ifPresent will not execute. at line 9 printing the resulted optional with value OCAJP

59 
- List<String> ints = new ArrayList<>();
  ints.stream().collect(Collectors.joining());

76 - LocalDate ldt = LocalDate.of(200,3,1);
     DateTimeFormatter format = DateTimeFormatter.ofPattern("dd/M/yyyy");
     sout(ldt.format(format)); //01/3/2000

82 - LocalDate ld = LocalDate.of(2015,2,27).plusDays(3); --> 2015-3-2

83 - Period p = Period.ofMonths(13); 
     sout(p.normalized()) P1Y1M
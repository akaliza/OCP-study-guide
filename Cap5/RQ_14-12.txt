280

1-OK
A. new Locale("hi");
B. new Locale("hi", "IN");

2-OK
C. Currency
D. Dates
E. Numbers

3-OK
C. All resource bundles defined as property files can be expressed using the Java class list
bundle format instead.
D. Changing the default locale lasts for only a single run of the program.


4-OK


6: Locale.setDefault(new Locale("en", "US")); //en_US
7: ResourceBundle b = ResourceBundle.getBundle("Dolphins");
8: b.getString("name");

B. Dolphins_en.java


5-WRONG
Dolphins.properties
  name=The Dolphin
  age=0
Dolphins_en.properties
  name=Dolly
  age=4
Dolphins_fr.properties
  name=Dolly

5: Locale fr = new Locale("fr");
6: Locale.setDefault(new Locale("en", "US"));
7: ResourceBundle b = ResourceBundle.getBundle("Dolphins", fr);
8: b.getString("name"); //Dolphins_fr.properties
9: b.getString("age");  //Dolphins_en.properties

E. Dolphins_fr.properties and Dolphins_en.properties

--WRONG
Once a bundle is chosen, only resources in that hierarchy are
allowed.

D. Dolphins_fr.properties and Dolphins.properties
5. D. Java will use Dolphins_fr.properties as the matching resource bundle on line 7
because it is an exact match on the language of the requested locale. Line 8 finds a matching
key in this file. Line 9 does not find a match in that file, and therefore it has to look
higher up in the hierarchy. Once a bundle is chosen, only resources in that hierarchy are
allowed.


6-OK

June 21, 2014?


D. LocalDate.of(2014, 6, 21);
F. LocalDate.of(2014, Month.JUNE, 21);

7-OK
D. The code does not compile.


8-OK
F. A runtime exception is thrown.

9-OK
B. 2018 APRIL 30


10-WRONG		           YYYY  M  dd  hh  mm  ss  		 
LocalDateTime d = LocalDateTime.of(2015, 5, 10, 11, 22, 33);
                     Y  M  D 
Period p = Period.of(1, 2, 3);

d = d.minus(p); //2014-03-07T11:22:33   
DateTimeFormatter f = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT);
System.out.println(d.format(f));

G. A runtime exception is thrown.
--WRONG
10. E. Even though d has both date and time, the formatter only outputs time.

TABELA pg271

11-OK
LocalDateTime d = LocalDateTime.of(2015, 5, 10, 11, 22, 33);
Period p = Period.ofDays(1).	ofYears(2);
d = d.minus(p);  
DateTimeFormatter f = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);
System.out.println(f.format(d)); ////5/10/13 11:22AM 

B. 5/10/13 11:22 AM

12-OK
2016–08–28T05:00 GMT-04:00 = 9:00GMT
2016–08–28T09:00 GMT-06:00 = 15:00GMT 

A. The first date/time is earlier.
E. The date/times are 6 hours apart.

13-WRONG
LocalDate date = LocalDate.of(2016, Month.MARCH, 13); //2016-03-13
LocalTime time = LocalTime.of(1, 30); 
ZoneId zone = ZoneId.of("US/Eastern");

ZonedDateTime dateTime1 = ZonedDateTime.of(date, time, zone);  //2016-03-13T01:30
ZonedDateTime dateTime2 = dateTime1.plus(1, ChronoUnit.HOURS); //2016-03-13T03:30
long hours = ChronoUnit.HOURS.between(dateTime1, dateTime2);   //2H
int clock1 = dateTime1.getHour(); //1 
int clock2 = dateTime2.getHour(); //3
System.out.println(hours + "," + clock1 + "," + clock2);

2 - 1 - 3

D. 2,1,3
---
B. 1,1,3
13. B. dateTime1 is 2016–03–13T01:30–05:00[US/Eastern] and dateTime2 is
2016–03–13T03:30–04:00[US/Eastern]. While the values are two hours apart, the time
zone offset changes as well, making it only change from 6:30 GMT to 7:30 GMT.


14-OK
Note that March 13, 2016, is the weekend that we spring forward, and November 6, 2016,
is when we fall back for daylight savings time.

Which of the following can fill in the blank without the code throwing an exception

ZoneId zone = ZoneId.of("US/Eastern");
LocalDate date = ;
LocalTime time1 = LocalTime.of(2, 15);
ZonedDateTime a = ZonedDateTime.of(date4, time1, zone);

A. LocalDate.of(2016, 3, 13)
C. LocalDate.of(2016, 11, 6)
D. LocalDate.of(2016, 11, 7)





15-WRONG
String m1 = Duration.of(1, ChronoUnit.MINUTES).toString();
String m2 = Duration.ofMinutes(1).toString();
String s = Duration.of(60, ChronoUnit.SECONDS).toString();
String d = Duration.ofDays(1).toString();
String p = Period.ofDays(1).toString();
System.out.println( );


A. m1 == m2 --String references do not point to the same object.
B. m1.equals(m2)


C. m1.equals(s)
15. B, C. Options A and D are incorrect because the String references do not point to the
same object. Option E is incorrect because a Period format begins with a P and a Duration
format begins with PT. They are different types and do not represent the same value
even though they are both a day. Remember that Duration uses hours/minutes/seconds and
Period uses years/months/days for measures. Options B and C are correct because m1, m2,
and s all represent a duration of the same length.





16-OK
LocalDate date = LocalDate.now();
LocalTime time = LocalTime.now();
LocalDateTime dateTime = LocalDateTime.now();
ZoneId zoneId = ZoneId.systemDefault();
ZonedDateTime zonedDateTime = ZonedDateTime.of(dateTime, zoneId);
long epochSeconds = 0;
Instant instant = ;

A. Instant.now()
B. Instant.ofEpochSecond(epochSeconds)
F. zonedDateTime.toInstant()

Options C, D, and E are incorrect because the source object does not represent a point in time.
Without a time zone, Java doesn’t know what moment in time to use for the Instant.


17- OK

What is the output of the following method if props contains {veggies=brontosaurus,
meat=velociraptor}

private static void print(Properties props) {
   System.out.println(props.get("veggies", "none") + " " + props.get("omni", "none"));
}

E. The code does not compile.

The Properties class defines a get() method that does not allow for a default value.
It also has a getProperty() method, which returns the default value if the key is not provided.


18-OK

D. props.keySet().stream().map(k -> props.get(k)).forEach(System.out::println);

Options E and F do not compile because you can’t get a stream directly from a Properties
object. Options A and B do not compile because the method is keySet(), not keys().
Option C outputs all of the keys, and Option D outputs all of the values.

19-OK
A. Year
B. Month
C. Day

20-OK
E. ZonedDateTime

Instant represents a point in time, but always uses GMT rather than the desired time zone.


16/20 = 80%
1. OK
B. java.util.function.Consumer<T>
C. java.util.function.Supplier<T>
D. java.util.function.Predicate<T>
E. java.util.function.Function<T, R>

2- ok 
import java.util.function.Predicate;
public class PredicateTest {
   public static void main(String []args) {
      Predicate<String> notNull = ((Predicate<String>)(arg -> arg == null)).negate(); // #1
      System.out.println(notNull.test(null)); -- false 
}
}
C. T his program prints: false


3- ERRADO (Coloquei A) - compila: Function<Integer, Integer> negate = (i -> -i), square = (i -> i * i), negateSquare = negate.compose(square);

B. T his program prints: -100

4- OK 

C. Function<String, Integer>


5- OK
import java.util.function.BiFunction;
public class StringCompare {
   public static void main(String args[]){ 
      BiFunction<String, String, Boolean> compareString = (x, y) -> x.equals(y);
      System.out.println(compareString.apply("Java8","Java8")); // #1
   }
}

B. T his program prints: true


6- OK

B. The get() method in java.util.function.Supplier<T> interface

7- ERRADO (Coloquei A ) - ""::contains compila 
D. T his program prints: doesn’t contain

8- ERRADO (Coloquei B) - retorna void consumer- OK
D. T his program prints: v
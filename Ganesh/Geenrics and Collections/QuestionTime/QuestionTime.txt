1- OK 
C. I t results in a compiler error

2- OK
A. I t prints the following:
First type: class java.util.LinkedList
Second type:class java.util.LinkedList

3- OK 
C. When executed, the program prints the following: Brazil China India Russia

When null is passed as a second argument to the Arrays.sort() method, it means
that the default Comparable (i.e., natural ordering for the elements) should be used.
The default Comparator results in sorting the elements in ascending order. The
program does not result in a NullPointerException or any other exceptions or a
compiler error.


4- ERRADO - (coloquei C) 
"abracadabra".chars().distinct().peek(ch -> System.out.printf("%c ", ch)).
sorted();

D. T his program terminates normally without printing any output in the console


5- OK 
IntStream.rangeClosed(1, 1).forEach(System.out::println);

A. I t prints: 1


6- OK
import java.util.stream.DoubleStream;
public class DoubleUse {
public static void main(String []args) {
DoubleStream nums = DoubleStream.of(1.0, 2.0, 3.0).map(i -> -i); // #1
System.out.printf("count = %d, sum = %f", nums.count(), nums.sum());
}
}

D. T his program crashes by throwing a java.lang.IllegalStateException

7- ERRADO (inseri C-falta de atenção)

B. T his program prints: "aaaeaa"

8- ERRADO (coloquei D) 
https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html
https://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html

$ java DequeTest - The removed element is: 1
B. When executed, this program prints the following: “The removed element is: 1”

The remove() method is equivalent to the removeFirst() method, which removes
the first element (head of the queue) of the Deque object.


9- ERRADO (coloquei A)
C. I t results in a compilation error

It looks like the setError() method in StrLastError is overriding setError()
in the LastError class. However, it is not the case. At the time of compilation, the
knowledge of type S is not available. Therefore, the compiler records the signatures of
these two methods as setError(String) in superclass and setError(S_extends_
CharSequence) in subclass—treating them as overloaded methods (not overridden). In
this case, when the call to setError() is found, the compiler finds both the overloaded
methods matching, resulting in the ambiguous method call error. Here is the error
message
Test.java:22: error: reference to setError is ambiguous, both method setError(T)
in LastError and method setError(S) in StrLastError match
err.setError("Last error");
^
where T and S are type-variables:
T extends Object declared in class LastError. S extends CharSequence declared in
class StrLastError.

6*/9
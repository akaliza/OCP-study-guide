1 - OK
d) T his code segment does not print anything on the console

2 - OK
b) while( (ch = inputFile.read()) != -1) {

3 - OK 

a) Base
Derived
DeriDerived


4 - OK

d) T his code prints:
	Awaiting
	Awaiting
	Awaiting
	Let's play



	final CyclicBarrier barrier = new CyclicBarrier(3, () -> System.out.println("Let's play"));
	// LINE_ONE
	Runnable r = () -> { // LINE_TWO
		System.out.println("Awaiting");
		try {
			barrier.await();
		} catch(Exception e) { /* ignore */ }
	};
	
	Thread t1 = new Thread(r);
	Thread t2 = new Thread(r);
	Thread t3 = new Thread(r);
	t1.start();
	t2.start();	
	t3.start();



	

<<<<<<< HEAD
5 - OK
=======
5 - OK 
>>>>>>> refs/remotes/origin/master
class Point {
private int x = 0, y;
public Point(int x, int y) {
this.x = x;
this.y = y;
}
// DEFAULT_CTOR
}


c) private Point() {
this(0, 0);
}



6- OK
b) R emoving only Stmt-1 will make the program compilable and it will print the
following: Base: Hello Derived

c) R emoving only Stmt-2 will make the program compilable and it will print the
following: Base Derived

d) R emoving both Stmt-1 and Stmt-2 will make the program compilable and it
will print the following: Base Derived


7- ERRADO 
d) T he program will compile without any error


Statement #1 will result in a compiler error since the keyword protected is not
allowed inside a method body. You cannot provide access specifiers (public,
protected, or private) inside a method body.


8- OK 
c) int years = Period.between(joiningDate, now).getYears();

9- OK 
class Outer {
  class Inner {  
    public void print() {
 	System.out.println("Inner: print");
    }
  }
}
class Test {
   public static void main(String []args) {
   // Stmt#1
   inner.print();
   }
}


d) Outer.Inner inner = new Outer().new Inner();

10- OK
c) When executed, this program prints 10


==============> 9/10

11- OK 

Base
e) When executed, this program prints the following:
yes, instance of AnEnum
yes, instance of EnumBase
yes, instance of Enum


12- ok
a) An enum can have private constructor
c) An enum can have public methods and fields
d) An enum can implement an interface


13- errado - coloquei D

c) T he program will report a compilation error at statement marked with the
comment #3



14- OK 
c) Line marked with comment THREE will result in a compiler error

15- OK 

c) class X <T extends DI> { }

16- errado coloquei D 

c) A Factory class may use Singleton pattern
A Factory class generates the desired type of objects on demand. Hence, it might
be required that only one Factory object exists; in this case, Singleton can be
employed in a Factory class.


17- OK 
class ClassA {}

interface InterfaceB {}

class ClassC {}

class Test extends ClassA implements InterfaceB {
   String msg;
   ClassC classC;
}
Which one of the following statements is true?
b) Class Test is related to ClassC with a composition relationship.



18- OK 

c) T he program prints the following: Brazil China India Russia




19- OK
b) class Q<T> {
T mem;
public Q(T arg) {
mem = arg;
}
}


20- OK 
b) public Object[][] getContents() {
return new Object[][] { { "1", "Uno" }, { "2", "Duo" }, { "3", "Trie" }};
}


===============> 
17/20 = 85% until here


21-OK
a) Iterable<T>


22- OK 
c) This program prints: 11


23- errado- coloquei A
b) Using java.util.concurrent.ThreadLocalRandom


24-OK
d) LocalDate firstOct2015 = LocalDate.parse("01/10/2015",fromDateFormat);

25- coloquei a - falta atenção
b) T he definition of asList2 will result in a compiler error

26-errado coloquei B 

a) Integer apply = func.apply(10).apply(20);

27-OK
e) When run, this program will print the following: null {} {}


28- OK 

c) This code will print: Happy birthday!


29- OK 
a) Base<Number> b = new Base<Number>();
f) Derived<Integer> b = new Derived<Integer>();


30- errado - coloquei o Double 

b) AtomicInteger
c) AtomicLong

===============> 
23/30 = 77% until here

31-ok
b) T his program prints the following: false

32-ok
a) java.util.ResourceBundle is the base class and is an abstraction of
resource bundles that contain locale-specific objects

b) java.util.PropertyResourceBundle is a concrete subclass of java.util.
ResourceBundle that manages resources for a locale using strings provided in
the form of a property file

d) java.util.ListResourceBundle defines the getKeys() method that returns
enumeration of keys contained in the resource bundle

33-errado faltou A 
b) The Callable interface declares a single method call() that computes a
result
d) The CyclicBarrier class allows threads to wait for each other to reach a
common barrier point


a) The Executor interface declares a single method execute(Runnable command)
that executes the given command at some time in the future

34 - errado coloquei B

c) This code segment prints the following output:
In AutoCloseableImpl.close()
In CloseableImpl.close()

35-ok
b) T his program prints: [1, 4, 9, 16, 25]


36 - OK 
d) T he compiler will report an error at statement marked with the comment #3

37 - ok 
d) When executed, this program does not print any output and terminates
normally

38 - ok
a) -1

39 - errado - coloquei A

b) The program will result in creating the file World.txt with the contents “World!”
in it.
The method call skip(n) skips n bytes (i.e., moves the buffer pointer by n bytes).
In this case, 6 bytes need to be skipped, so the string “Hello” is not copied in the
while loop while reading and writing the file contents.


40 - ok
d) T his program works fine and copies srcFile to dstFile



===============> 
30/40 = 75% until here


41- OK 
interface InterfaceTwo<T> {
T foo();
}
b) InterfaceTwo<LocalDateTime> val = LocalDateTime::now;

42-errado - coloquei e

b) Locale locale2 = Locale.US;
The static public final Locale US member in the Locale class is accessed
using the expression Locale.US, as in option b).
The other options will result in compiler error(s).

43- errado - falta de atenção coloquei e (false)

a) This code results in a compiler error in line marked with the comment LINE-1
The functional interface Predicate<T> takes type T as the generic parameter that
is not specified in LINE-1. This results in a compiler error because the lambda
expression uses the method contains() in the call exam.contains(“OCP”).
If Predicate<String> were specified (as in Predicate isOCPExam = exam ->
exam.contains("OCP")), this code segment would compile without errors, and
when executed will print “false”.


44- ok a
a) public static void main(String []files) {
try (FileReader inputFile
= new FileReader(new File(files[0]))) {
//...
}
catch(IOException ioe) {}
}



45- ok 
c) java.util.concurrent.CyclicBarrier


46- OK 
a) T his program prints the following: Uno

47- errado - coloquei E 

a) This code segment prints the following: 2 1
This code segment modifies the underlying CopyOnWriteArrayList container
object using the add() method. After adding the elements “2” and “1”, the iterator
object is created. After creating this iterator object, two more elements are added,
so internally a copy of the underlying container is created due to this modification
to the container. But the iterator still refers to the original container that had two
elements. So, this program results in printing 2 and 1. If a new iterator is created
after adding these four elements, it will iterate over all those four elements.


48- OK 
d) T his code segment prints: true

49- errado coloquei A 

d) This code segment lists the files ending with suffix .java in the current directory
The path “.” specifies the current directory. The pattern “*.{java}" matches file
names with suffix .java.


50- errado coloquei B

e) This code segment prints the following: dir file.txt
The name elements in a path object are identified based on the separators. Note:
To iterate name elements of the Path object does not actually require that the
corresponding files/directories must exist, so it will not result in throwing any
exceptions.


===============> 
35/50 = 70% until here


51

52

53

54

55

56

57

58

59

60


437
466

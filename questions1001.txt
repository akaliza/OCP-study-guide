>>1 - A -equals(AnotherObject obj){}
2- A OK
3- C. s1.equals(s2) ok 
4-C. The class compiles but has an improper hashCode() method. ok 
5-A. If a.equals(b) is true, a.hashCode() == b.hashCode() is always true.
  D. If a.equals(b) is false, a.hashCode() == b.hashCode() can sometimes be true.
OK
6-B. 1  OK 
7-E. The code does not compile OK 
>>8-B. The output is 10. C - final static  
9-B. x is 24.
10-C. The code compiles successfully, and two bytecode files are generated: Book.class and
Book$BookReader.class.
11 - D. import static my.sports.Football.*;
12-E. A runtime exception is thrown.
13-B. The output is 3.*
14-E. l instanceof Chipmunk does not compile.
15-B. If equals(null) is called, the method should return false.
E. If equals() is passed the wrong type, the method should return false.
16-E. Outer.Inner in = new Outer().new Inner();
17-B. Compiler error on line 3.
C. Compiler error on line 5.
18-G. The code does not compile.
19-A. public void toddle() {}
C. public final void toddle() {}
20-C. walk,toddle,
21-A. @Override public boolean equals(Object o) { return false; }
C. @Override public int hashCode() { return 42; }
E. @Override public void play() { }
18/21 86%


cap 2 

1-C,E  -OK 
2-E - OK 
>>3-AD
A. Climb
C. ArcticMountainClimb --default method missing implementing body
D. MountainClimb
4-OK
A. () -> ""
D. (Camel c) -> {return;}
5-OK
B. Requires constructor of singleton class to be private.
E. Ensures that there is only one instance of an object in memory.
F. Requires a public static method to retrieve the instance of the singleton.
6-A. match ok 
7- OK
C. Mark name final and private.
E. Replace the getFriends() method with methods that do not give the caller direct
access to the List<Seal> friends.
G. Make a copy of the List<Seal> friends in the constructor.
H. Mark the Seal class final.
8-OK
C. They enable classes to have multiple inheritance.
F. All members of an interface are public.
>>9-
D. Change the access modifier of cheetahManager from public to private.
F. Add synchronized to getCheetahManager().
9.  E is incorrect, as marking the instance final would prevent lazy instantiation and as the code would not compile.
10-OK
D. The code will not compile because of line 8.
11-OK
A. caller((e) -> "Poof");
F. caller((e) -> { String f = ""; return "Poof"; });
12-OK
C. Compiler error on line x1.
13-OK
B. All of the instance variables marked private and final.
C. They don’t define any setter methods.
E. They prevent methods from being overridden.
14-OK
B. TurtleFrog
A. Frog
D. CanHop
E. Object
15-OK
B. If a method takes a class that is the superclass of three different object references, then
any of those objects may be passed as a parameter to the method.
C. A reference to an object may be cast to a superclass of the object without an explicit cast.
16-OK
F. The code will not compile because of lines 3 and 4.
17-OK
B. boolean instance variables are accessed with is or get.
C. All instance variables are marked private.
F. The first letter of the any getter/setter, after the get, set, or is prefix, must be
uppercase.
18-OK
A. Inheritance supports access to protected variables.
B. Object composition tends to promote greater code reuse than inheritance.
E. Object composition requires a class variable to be declared public or accessible from a
public method to be used by a class in a different package.
19-OK
B. Manage a reusable cache of objects.
D. Manage write access to a log file.
E. Provide central access to application configuration data.
20-OK
A. It compiles without issue.

18/20 = 90%



cap 3

1-OK
B. ArrayList
2-OK
D. TreeMap
3-OK
E. Compiler error on line 7
4-OK
E. hihello
5-OK
B. HashSet<? super ClassCastException> set = new HashSet<Exception>();
C. List<String> list = new Vector<String>();
F. Map<String, ? extends Number> hm = new HashMap<String, Integer>();
6-OK
C. hithere
7-OK
A. The code compiles successfully
D. The output is indeterminate.
8-OK
C. One
9-OK
E. None of the above
10-OK
A. Abb aab 123
11-OK
A. 16
12-OK
A. Helper.printException(new FileNotFoundException("A"));
B. Helper.printException(new Exception("B"));
D. Helper.<NullPointerException>printException(new NullPointerException
("D"));
>>>>13- 
:::A. ArrayDeque<?> list = new ArrayDeque<String>();
:::Option A is incorrect because it is a Queue and not a List. 
B. ArrayList<? super Date> list = new ArrayList<Date>();
E. Vector<? extends Number> list = new Vector<Integer>();
14-OK
C. [88. 55] [55, 88]
15-OK
D. The result is undefined.	
16-OK
B. Comparator is in the java.util package.
D. compare() is in the Comparator interface.
F. compare() takes two method parameters.
17-OK
B. On line 1, fill in with <T>.
D. On line 3, fill in with <>.
18-OK
A. A a1 = new A();
B. A a2 = new B();
19-OK
A. If we fill in the blank with List, the output is [10].
D. If we fill in the blank with Queue, the output is [10, 12].
20-OK
E. Compiler error on line 7.
21-OK
A. On line 6, fill in the blank with hasNext().
F. On line 7, fill in the blank with next().
22-OK
B. Add <T> after the static keyword.
23-OK
B. Comparator interface
E. removeIf method on a Collection
24-
F. System.out::println
25-
NOT IN THE EXAM

23/24=96%
warning: 
19. A, D. A LinkedList implements both List and Queue. The List interface has a method to
remove by index. Since this method exists, Java does not autobox to call the other method.
Queue has only the remove by object method, so Java does autobox there. Since the number
1 is not in the list, Java does not remove anything for the Queue



>>1- 
::B. 212
::1. D. No terminal operation is called, so the stream never executes. 

2-OK
F. The code hangs.
3-OK
E. An exception is thrown.
4-OK
A. At most one terminal operation can exist in a stream pipeline.**
B. Terminal operations are a required part of the stream pipeline in order to get a result.
5-OK
A. collect() 
B. count()
>>6-
::E. noneMatch
::6. Option A is correct because it is safe to return false as soon as one element passes 
::through the stream that doesn’t match.
7-OK
F. return list.stream()
.sorted((a, b) -> b.compareTo(a))
.collect(Collectors.toList());
8-OK
D. is.findAny() returns the type OptionalInt.
E. is.sum() returns the type int.
9-OK
B. if (opt.isPresent()) System.out.println(opt.getAsLong());
D. opt.ifPresent(System.out::println)
10-OK
F. N, M
11-OK
C. Change x -> x++ to x -> ++x.
B. Change map(x -> x) to map(x -> "" + x) .
E. Wrap the entire line in a System.out.print statement.
12-OK
F. Supplier<String>
A. BiConsumer<String, String>
G. UnaryOperator<String>
13-OK
F. The code does not compile.
14-OK
D. Line 7 does not compile.
15-OK
D. Map<Boolean, List<String>>
E. Map<Boolean, Set<String>>
16-OK
C. {false=[], true=[]} {}
17-OK
E. Function<Integer, Integer> f = x -> x*x;
18-OK
D. 1.2 and 2.4
19-OK
A. BooleanSupplier
C. DoubleSupplier
E. IntSupplier
20-OK
B. IntStream.range(1, 6)
.forEach(System.out::println);


18/20 = 90%


cap 5
276
1-OK
A. new Locale("hi");
B. new Locale("hi", "IN");
2-OK
C. Currency
D. Dates
E. Numbers
3-OK
C. All resource bundles defined as property files can be expressed using the Java class list
bundle format instead.
D. Changing the default locale lasts for only a single run of the program.
4-OK
B. Dolphins_en.java
5-OK
D. Dolphins_fr.properties and Dolphins.properties
6-OK
D. LocalDate.of(2014, 6, 21);
F. LocalDate.of(2014, Month.JUNE, 21);
>>7-
::E. A runtime exception is thrown.
::7. D. A LocalDate does not have a time element. Therefore, it has no method to add hours.
8-OK
F. A runtime exception is thrown.
9-OK
B. 2018 APRIL 30
10-OK
E. 11:22 AM
11-OK
B. 5/10/13 11:22 AM
12-OK
A. The first date/time is earlier
E. The date/times are 6 hours apart.
13-OK
B. 1,1,3
14-OK
A. LocalDate.of(2016, 3, 13)
C. LocalDate.of(2016, 11, 6)
D. LocalDate.of(2016, 11, 7)
>>15-
::A. m1 == m2
::B. m1.equals(m2)
::15. B, C. Options A and D are incorrect because the String references do not point to the
  same object. Options B and C are correct because m1, m2, and s all represent a duration of the same length.
16-OK
A. Instant.now()
B. Instant.ofEpochSecond(epochSeconds)
F. zonedDateTime.toInstant()
17-OK
E. The code does not compile.
18-OK
D. props.keySet().stream().map(k -> props.get(k)).forEach(System.out::println);
19-OK
A. Year
B. Month
C. Day
>>20-
>>Instant.now() -- NOT 
>>E. ZonedDateTime

17/20 =85%

cap6 
1-OK
C. throws on line 5 and throw on line 6
2-OK
B. Add throws Exception to the declaration on line 5.
C. Change line 8 to } catch (Exception e) {}.
3-OK
E. IOException | RuntimeException e
4-OK
A. A traditional try statement without a catch block requires a finally block.
B. A traditional try statement without a finally block requires a catch block.
5-OK
C. TWDEF
6-OK
G. The code does not compile.
7-OK
C. The code throws an ArrayIndexOutOfBoundsException.
8-OK
B. java –ea On
C. java -da -ea:On On
9-OK
A. assert n < 0: "OhNo";
D. assert(n < 0): "OhNo";
10-OK
A. Line 5 does not compile. 
E. Line 7 is an appropriate use of an assertion.
11-OK
B. IllegalStateException
D. MissingResourceException
E. DateTimeParseException
12-OK
A. // leave line blank
D. e = new SneezeException();
E. e = new SniffleException();
13-OK
A. // leave line blank
14-OK
F. None of the above; the code does not compile
15-OK
B. Two
E. Five
>>>16-
:B. rain 1
:16. C. The exception inside the try block becomes the primary exception since it is
:thrown first. Then two suppressed exceptions are added to it when trying to close the
:AutoCloseable resources. Walk walk1 = new Walk(); Walk walk2 = new Walk();

17-OK
A. AutoCloseable
B. Closeable
18-OK
B. Exception, Closeable
>>19-
B. RuntimeException
::19.D -- Choices C and E are allowed because they actually catch a SQLException.
::Choice D is not allowed because there is no IOException declared. Choice B is allowed
::because a method does not have to handle an exception if it declares it.

20-OK
E. None of the above.

18/20=90%

cap7
1-OK
D. c.parallelStream()
F. s.parallel()
2-OK
A. Both can throw unchecked exceptions.
C. Callable can throw a checked exception.
D. Both can be implemented with lambda expressions.
F. Callable returns a generic type.
>>3-
::C. Line w2 -  scheduleWithFixedDelay only has a Runnable with don't return nothing 
::3. B, C.  The first problem is that
::although a ScheduledExecutorService is created, it is assigned to an ExecutorService.
::Since scheduleWithFixedDelay() does not exist in ExecutorService, line w1 will not
::compile, and B is correct. The second problem is that scheduleWithFixedDelay()supports
::only Runnable, not Callable, and any attempt to return a value is invalid in a Runnable
::lambda expression;
4-ok
C. The output cannot be determined ahead of time.
5-ok
D. Livelock, Race conditions
6-OK
B. The task will be added to an internal queue and completed when there is an available
thread.
7-OK
A. It outputs 3 6 4.
The ConcurrentSkipListSet class allows modifications while iterating, so it is possible that the second loop could generate an infinite loop.
8-OK
G. The output cannot be determined ahead of time.
9-OK
A. The code correctly finds the minimum value in the array.
C. MyTask inherits RecursiveTask.
E. The class produces single-threaded performance at runtime.
10-OK
C. The code will not compile because of line q2. **revisar
11-OK
A. If the code does output anything, the order cannot be determined.
F. The code may produce a deadlock at runtime.
>>12-
::D. The code will not compile because of m3.
::12. E. The program compiles without issue, so B, C, and D are incorrect. Lines m2 and m3
::throw a compiler warning about generics but still compile. Notice that RecursiveAction,
::unlike RecursiveTask, does not return a value. However, since we used a generic Fork-
::JoinTask reference, the code still compiles. The issue here is that the base condition is not
::reached since the numbers start/end are consistently positive. This causes an infinite loop,
::although since memory is finite, Java detects this and throws a StackOverflowError, so E
::is correct. In practice, this could also generate a locking exception before the StackOverflowError
::when the program runs out of memory, but in either circumstance, the program will exit.
13-OK
A. It outputs 3 4.
G. The collect() operation is always executed in a single-threaded fashion. **flatMap() losee the parallel()
14-OK
D. The code will not compile.
15-OK
C. () -> 5
E. () -> "The" + "Zoo" **
G. () -> {System.out.println("Giraffe"); return 10;}
>>16-
>>C. The code will not compile because of line b2. - submit with runnable return null 
::16. F, H. The application compiles and does not throw an exception, so B, C, D, E, and G are
::incorrect. Even though the stream is processed in sequential order, the tasks are submitted
::to a thread executor, which may complete the tasks in any order. Therefore, the output cannot
::be determined ahead of time and F is correct, making A incorrect. Finally, the thread
::executor is never shut down; therefore the code will run but it will never terminate, making
::H also correct.
17-OK
B. It outputs 100 100.
18-OK
F. It compiles but waits forever at runtime.
19-OK
A. It compiles without issue.
            NOT(class and this different) The lock locks acquired on k1 and k4 are on the same object.
F. At most one instance of TicketManager will be created in the application.
20-OK
A. By itself, concurrency does not guarantee which task will be completed first.
D. Applications with many resource-heavy tasks tend to benefit more from concurrency
than ones with CPU-intensive tasks.
21-ok
A. It outputs a number 10 times.
C. It outputs a null value 10 times.
D. It outputs Exception! 10 times.
E. It hangs indefinitely at runtime.
22-ok
F. The code will not compile because of line n1.


19/22 = 86%
18/22 = 82% *q19

cap8
1-OK
A. BufferedInputStream
D. ObjectInputStream
1. A, D. The reference is for an InputStream object, so only a high-level input Stream class
is permitted. B is incorrect because FileInputStream is a low-level stream that interacts
directly with a file resource, not a stream resource.
2-OK
B. It is more secure.
E. Because Java puts all String values in a reusable pool.
F. So that the value can be removed from memory immediately after use.
3-OK
C. Console is obtained using the singleton pattern.
D. When getting a Console object, it might be null.
4-
C. c.readLine()
>>5-
::A. The code runs without error but prints nothing.***
::D. A NullPointerException might be thrown.
::E. An IOException might be thrown.
::5. B, D, E. This is correct code for reading a line from the console and writing it back out
::to the console, making option B correct. Options D and E are also correct. If no console
::is available, a NullPointerException is thrown. The append() method throws an
::IOException.
6-OK
A. The process of converting serialized data back into memory is called deserialization.
E. The readObject() method of ObjectInputStream may throw a ClassNotFoundException
even if the return object is not explicitly cast.
7-OK
D. Root
8-OK
A. /home/parrot is an absolute path.
9-OK
A. The class must implement the Serializable interface.
10-OK
C. It can delete a single file.
F. It compiles but may throw an exception at runtime.
11-OK
C. mkdirs()
E. renameTo()
G. mkdir()
12-OK
B. new File("c:\\book\\java");
C. new File("c:/book/java");
13-OK
A. System.err
C. System.in
E. System.out
14-OK
E. PrintReader
15-OK
A. It prints the first line of the file to the console.
16-OK
D. The data of some classes cannot be easily serialized, such as those managing threads or
processes.
F. Classes that store most of their data in static fields would not be easily serialized.
17-OK
A. ObjectInputStream
B. PrintStream
D. PrintWriter
G. ObjectOutputStream
18-OK
B. printf
D. format
E. writer().println
>>19-
::C. BufferedOutputStream
::B. FileOutputStream
::19. B, C, D. Since you need to write primitives and String values, the OutputStream classes
::are appropriate. Therefore, you can eliminate A and F since they are not OutputStream
::classes. Next, DirectoryStream is not a java.io class, so E is incorrect. As you shall see
::in the next chapter, DirectoryStream is an NIO.2 class. The data should be written to the
::file directly using the FileOutputStream class, buffered with the BufferedOutputStream
::class and automatically serialized with the ObjectOutputStream class, so B, C, and D are
::correct. G is incorrect because it is not related to this task. We include it as an option to
::help you adapt to situations on the exam where you may come across a class with which
::you are not familiar. Just answer as best you can, based on what you know.
20-OK
A. More convenient code syntax when working with String data
C. Automatic character encoding
>>21-
::A. name
::B. tail
::21. A, C. The code compiles and runs without issue, so F and G are incorrect. Note that serialUID
::is not the same as serialVersionUID, although since serialVersionUID is recommended
::but not required, this does not pose any compilation issues. Just be aware that
::serialUID will not be used by the serialization process for version control. The name variable
::and age variable are both transient, which means that their values will not be saved
::upon serialization. Upon deserialization, the default initializations and constructor will be
::skipped, and they will both be null; therefore A and C are correct. B is incorrect because
::tail is not transient and could be set by a caller before being serialized. D is also incorrect
::because a serialized empty array is not the same as a null pointer. Even though these
::non-transient fields could be set to null, they are not guaranteed to be null after deserialization.
::E is incorrect because the static value will not be serialized; it will be available
::on the class after deserialization.
22-OK
E. null
23-OK
H. The result cannot be determined with the information given.


20/23=87%

cap9 

1-OK
F. The code does not compile.
2-OK
B. path refers to a symbolic link in the file system. 
C. path refers to an empty directory in the file system.
3-OK
D. The code will not compile because of line 4.
4-OK
C. /user/home/bear
5- OK
B. A new directory will be created only if /mammal/kangaroo exists.
C. If the code creates a directory, it will be reachable at /kang/joey.
D. If the code creates a directory, it will be reachable at /mammal/kangaroo/joey.
>6-
::B. It prints Has Sub-directory.
::6. C. The code does not compile since the stream output by Files.walk() is Stream<Path>,
::therefore we need a Predictate, not a BiPredicate, on line w1, and the answer is C. If the
::Files.find() method had been used instead, and the lambda had been passed as an argument
::to the method instead of on filter(), the output would be B, Has Sub-directory,
::since the directory is given to be empty. For fun, we reversed the expected output of the
::ternary operation to make sure that you understood the process

7-OK
F. It compiles but throws an exception at runtime
8-OK
A. /pets/../cat.txt/./dog.txt
/pets/../cat.txt
9-OK
B. It can be run on large files with very little memory available.
C. It can be chained with stream methods directly.
10-OK
C. If another process is monitoring the file system, it will not see an incomplete file at
runtime.
E. The metadata of the monkey.txt will be moved along with the file.
11-OK
A. It will output false.
12-OK
A. new Path("jaguar.txt")
F. new FileSystem().getPath("leopard")
>>13-
::A. It will print all symbolic links in the directory tree ending in .txt.
::13. B. Note that the sample code creates a stream, collects it as a list, and then converts it back to a stream
::before outputting the filenames. The key here is that the depth parameter specified as the
::second argument to find() is 0, meaning the only record that will be searched is the toplevel
::directory. Since we know that the top directory is regular and not a symbolic link, no
::other paths will be visited and nothing will be printed. For these reasons, B is the correct
::answer and A is incorrect.
14-OK
E. Files.list()
15-OK
D. It makes fewer round-trips to the file system.
E. It can be used to access file system–dependent attributes. 
F. For reading multiple attributes, it is often more performant.
16-OK
F. If it prints anything, it will not include commas.
17-OK
A. It compiles but may throw an exception at runtime.
G. It prints all .java files in the root directory tree.
18-OK
D. true false true
>>19-
::A. NIO.2 supports file system–dependent attributes.
::E. NIO.2 supports symbolic links.
::19. A, C, E. While all of the answers are applicable to the NIO.2, only A, C, and E are options
::that are not supported by the legacy java.io.File class and therefore give NIO.2 an
::advantage over java.io.File.
20-OK
B. 1

17/20 = 85%


cap10





